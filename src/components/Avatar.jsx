/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 F:\r3f-vite-starter-main\public\models\66f6cf2311bf6ced9513b39b.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import * as THREE from 'three';
import { useAnimations, useFaceControls, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'

export function Avatar (props) {
  const {animation} = props
  const {headFollow, cursorFollow}= useControls({
    headFollow: false,
    cursorFollow: false,
  })
  const group= useRef();
  // const { scene } = useGLTF('models/66f6cf2311bf6ced9513b39b.glb')
  // const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  // const { nodes, materials } = useGraph(clone)
  const { nodes, materials } = useGLTF('models/66f6cf2311bf6ced9513b39b.glb')
  const {animations: typingAnimation} = useFBX('animations/Typing.fbx')
  const {animations: hiAnimation} = useFBX('animations/Greeting.fbx')
  const {animations: standAnimation} = useFBX('animations/Standing.fbx')

  // const {animations: standAnimation} = useFBX('animations/.fbx')
  // console.log(typingAnimation)
  typingAnimation[0].name= "Typing";
  hiAnimation[0].name="hi";
  standAnimation[0].name="Standing";

  const { actions} = useAnimations([typingAnimation[0],hiAnimation[0],standAnimation[0]], group);

  useFrame((state)=>{
    if(headFollow){
    group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if(cursorFollow){
      const target = new THREE.Vector3(state.pointer.x, state.pointer.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });


  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () =>{
      actions[animation].reset().fadeOut(0.5);
    }
  }, [animation]);

  // const fbxModel = useGLTF('animations/untitled.glb');
  // console.log("FBX Model (without animations):", fbxModel);
  



  return (
    
    <group ref={group} {...props} dispose={null}>
      <group>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
    </group>
  )
}

useGLTF.preload('models/66f6cf2311bf6ced9513b39b.glb')
